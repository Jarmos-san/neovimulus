#!/usr/bin/env bash
#
# Script to install Neovimulus on a user's local machine automatically.
#
# Author: Somraj Saha
# License: MIT License
# (see https://github.com/Jarmos-san/neovimulus/blob/main/LICENSE for info).

set -euo pipefail

# Some colour codes to make the formatted output prettier.
RED="\033[0;31m"
GREEN="\033[0;32m"
YELLOW="\033[0;33m"
BLUE="\033[0;34m"
NOCOLOR="\033[0m"

# Temporary directory to download the tarball to before its extracted
TEMP_DIR=$(mktemp --directory)

#####################################################################
# Remove all unnecessary artifacts created by the script upon
# successful execution.
#####################################################################
cleanup() {
	# Remove the temporary directory which was created to download and
	# extract the tarball from the remote repository
	rm --recursive --force "$TEMP_DIR"

	# Remove the colour codes which was used to format the
	# STDERR/STDOUT messages.
	unset RED
	unset GREEN
	unset YELLOW
	unset BLUE
	unset NOCOLOR
}

#####################################################################
# Wrapper function to more easily output an error message to STDERR.
# Arguments:
#   The message to echo to STDERR.
# Outputs:
#   An ANSI colour code formatted message to print to STDERR based on
#   the message which is passed to the function as a parameter.
#####################################################################
function error() {
	echo -e "${RED}[ERROR]${NOCOLOR} $1"
}

#####################################################################
# Wrapper function to easily print a warning to STDOUT.
# Arguments:
#   The message to echo to STDOUT.
# Outputs:
#   An ANSI colour code formatted message to print to STDOUT based on
#   the message which is passed to the function as a parameter.
#####################################################################
function warn() {
	echo -e "${YELLOW}[WARN]${NOCOLOR} $1"
}

#####################################################################
# Wrapper function to easily print a success to STDOUT.
# Arguments:
#   The message to echo to STDOUT.
# Outputs:
#   An ANSI colour code formatted message to print to STDOUT based on
#   the message which is passed to the function as a parameter.
#####################################################################
function success() {
	echo -e "${GREEN}[SUCCESS]${NOCOLOR} $1"
}

#####################################################################
# Wrapper function to easily print a success to STDOUT.
# Arguments:
#   The message to echo to STDOUT.
# Outputs:
#   An ANSI colour code formatted message to print to STDOUT based on
#   the message which is passed to the function as a parameter.
#####################################################################
function info() {
	echo -e "${BLUE}[INFO]${NOCOLOR} $1"
}

#####################################################################
# Check if certain prerequisite tools are installed locally or not,
# if not then exit the execution of the script.
# Arguments:
#   An array of tools to check for if they're installed & available
#   or not.
# Outputs:
#   Exit Code 0 (on successful checks)
#   Exit Code 1 (on unsuccessful checks)
#####################################################################
function prerequisites_exists() {
	info "Checking if certain prerequisite tools are available..."

	# List of the prerequisite tools needed for proper functioninig of the framework
	declare -a programs=("git" "nvim" "gcc" "curl" "tar")

	# List of missing prerequisite tools
	declare -a missing_tools=()

	# Loop through the list of "programs" array to check if there are any missing prerequisite tools
	for program in "${programs[@]}"; do
		if ! [[ -x "$(command -v "${program}")" ]]; then
			missing_tools+=("$program")
		fi
	done

	if ((${#missing_tools[@]} != 0)); then
		error "Some prerequisite tools were not found or not installed...exiting!"
		info "Refer to the documentations and install the said tools before trying again"
		return 1
	fi
}

#####################################################################
# Check if the latest Neovim binary is installed or not, if not then
# exit execution with a non-zero number.
# Outputs:
#   Exit Code of 0 (on successful check)
#   Exit Code of 1 (on unsuccessful check)
#####################################################################
function is_neovim_latest() {
	# Fetch the latest Neovim version which is installed locally
	local nvim_version
	nvim_version=$(nvim --version | awk '/NVIM/ {print $2}')

	# Check if the installed Neovim is v0.9.0 or not, exit if otherwise.
	if ! [[ "$nvim_version" = "0.9.0" ]]; then
		error "$nvim_version is older than v0.9.x...please install the latest version!"
		return 1
	fi
}

#####################################################################
# Download the tarball of the remote repository from GitHub for final
# extraction & setup.
# Arguments:
#   None
# Outputs:
#   Exit code of 0 (on successful check)
#   Exit code of 1 (on unsuccessful check)
#####################################################################
function download_tarball() {
	# Initialise the variables according to the scope of the function.
	local url
	local latest_tag
	local tarball_url
	local temp_dir
	local tarball

	# Get the latest release tag name
	url="https://api.github.com/repos/Jarmos-san/neovimulus/releases/latest"
	latest_tag=$(curl --fail --silent --show-error --location "$url" |
		grep --only-matching --perl-regexp '"tag_name": "\K(.*)(?=")')

	# Construct the URL of the tarball
	tarball_url="https://github.com/Jarmos-san/neovimulus/archive/${latest_tag}.tar.gz"

	# Temporary location to store the tarball at (it'll be cleaned up later on)
	temp_dir=$(mktemp --directory)

	# Name of the downloaded tarball
	tarball="$temp_dir/neovimulus.tar.gz"

	# Download the tarball from the repository.
	curl --fail --silent --show-error --location --output "$tarball" "$tarball_url"

	if [[ -f "$tarball" ]]; then
		return 0
	fi
}

#####################################################################
# Extract the contents of the downloaded tarball & setup Neovimulus
# on the user's local machine.
# Arguments:
#   None
# Outputs:
#   None
#####################################################################
function setup_neovimulus() {
	# Initialising some local variables to be used for setting up Neovimulus.
	local neovimulus_config_dir
	local tarball

	# Neovimulus configuration directory
	neovimulus_config_dir="$HOME/.config/neovimulus"

	# Create the aforementioned config directory if it doesn't already exists.
	if ! [[ -d "$neovimulus_config_dir" ]]; then
		mkdir --parents "$neovimulus_config_dir"
	fi

	# Extract the contents of the tarball to the Neovim configuration location
	tar --extract --file="$tarball" --directory="$neovimulus_config_dir" "neovimulus"

	# Check if the ".bashrc" or ".bash_profile" files exists, if not then
	# create either of them and append the "NVIM_APPNAME" environment variable
	# which Neovim will natively use to switch to the Neovimulus configuration
	# framework.
	if ! test -f "$HOME/.bashrc" || "$HOME/.bash_profile"; then
		touch "$HOME/.bashrc" && echo "NVIM_APPNAME=$neovimulus_config_dir" >>"$HOME/.bashrc"
	fi
}

#####################################################################
# Entrypoint of the script to invoke with all the arbitrary
# parameters the script can be invoked with.
# Arguments:
#   None
# Outputs:
#   None
#####################################################################
function main() {
	info "This script will download & setup Neovimulus for you now..."

	if prerequisites_exists && is_neovim_latest; then
		success "All prerequisite tools are available...proceeding with setting up Neovimulus!"
	else
		exit 1
	fi

	info "Downloading tarball from the remote GitHub repository..."

	if download_tarball; then
		info "Download complete...setting up Neovimulus"
		setup_neovimulus
		success "Neovimulus was successfully installed and setup!"
		info "You can now restart you terminal and invoke the \"nvim\" command to start using Neovimulus..."
	else
		error "Downloading tarball failed...please check your Internet & retry execution."
	fi
}

# Invoke the script with all arbitrary parameters passed to it as flags
main "$@"

# Invoke the cleanup function after the script exists with a sucessful invocation
trap cleanup EXIT
