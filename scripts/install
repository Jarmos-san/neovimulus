#!/usr/bin/env bash
#
# Script to install Neovimulus on a user's local machine automatically.
#
# Author: Somraj Saha
# License: MIT License
# (see https://github.com/Jarmos-san/neovimulus/blob/main/LICENSE for info).

set -euo pipefail

# Some colour codes to make the formatted output prettier.
RED="\033[0;31m"
GREEN="\033[0;32m"
YELLOW="\033[0;33m"
BLUE="\033[0;34m"
NOCOLOR="\033[0m"

#####################################################################
# Remove all unnecessary artifacts created by the script upon
# successful execution.
#####################################################################
cleanup() {
	# Remove the temporary directory which was created to download and
	# extract the tarball from the remote repository
	rm --recursive --force "$TEMP_DIR"

	# Remove the colour codes which was used to format the
	# STDERR/STDOUT messages.
	unset RED
	unset GREEN
	unset YELLOW
	unset BLUE
	unset NOCOLOR
}

#####################################################################
# Wrapper function to more easily output an error message to STDERR.
# Arguments:
#   The message to echo to STDERR.
# Outputs:
#   An ANSI colour code formatted message to print to STDERR based on
#   the message which is passed to the function as a parameter.
#####################################################################
function error() {
	echo -e "${RED}[ERROR]${NOCOLOR} $1"
}

#####################################################################
# Wrapper function to easily print a warning to STDOUT.
# Arguments:
#   The message to echo to STDOUT.
# Outputs:
#   An ANSI colour code formatted message to print to STDOUT based on
#   the message which is passed to the function as a parameter.
#####################################################################
function warn() {
	echo -e "${YELLOW}[WARN]${NOCOLOR} $1"
}

#####################################################################
# Wrapper function to easily print a success to STDOUT.
# Arguments:
#   The message to echo to STDOUT.
# Outputs:
#   An ANSI colour code formatted message to print to STDOUT based on
#   the message which is passed to the function as a parameter.
#####################################################################
function success() {
	echo -e "${GREEN}[SUCCESS]${NOCOLOR} $1"
}

#####################################################################
# Wrapper function to easily print a success to STDOUT.
# Arguments:
#   The message to echo to STDOUT.
# Outputs:
#   An ANSI colour code formatted message to print to STDOUT based on
#   the message which is passed to the function as a parameter.
#####################################################################
function main() {
	# TODO: Create an entrypoint function
	echo "Hello World!"
}

# TODO: Move these lines to the "main" function
echo -e "${YELLOW}[INFO]${NOCOLOR} This script will download & setup Neovimulus for you now..."
echo -e "${YELLOW}[INFO]${NOCOLOR} Checking if certain prerequisite tools are available..."

# List of the prerequisite tools needed for proper functioninig of the framework
readonly programs=("git" "nvim" "gcc" "curl" "tar")

# Loop through the list of "programs" array to check if there are any missing prerequisite tools
for program in "${programs[@]}"; do
	if ! command -v "$program" &>/dev/null; then
		echo -e "${RED}[ERROR]${NOCOLOR}: \"${YELLOW}$program${NOCOLOR}\" is not installed or cannot be invoked!"
		echo -e "${YELLOW}[INFO]${NOCOLOR} Exiting....Refer to the usage guidelines to know what the prerequisite tools are."
		exit 1
	fi
done

# Fetch the latest Neovim version which is installed locally
NVIM_VERSION=$(nvim --version | awk "/NVIM/ {print $2}")

# Check if the installed Neovim is v0.9.0 or not, exit if otherwise.
if ! test "$NVIM_VERSION" = 0.9.0; then
	echo -e "${RED}[WARN]${NOCOLOR} An older Neovim v$NVIM_VERSION found..."
	echo -e "${YELLOW}[INFO] Exiting...Please install the latest Neovim v0.9."
	exit 1
fi

echo -e "${GREEN}[SUCCESS]${NOCOLOR} All prerequisite tools are available...proceeding with setting up Neovimulus!"

echo -e "${YELLOW}[INFO]${NOCOLOR}: Downloading tarball from the remote GitHub repository..."

# Get the latest release tag name
LATEST_TAG=$(curl --fail --silent --show-error --location "https://api.github.com/repos/Jarmos-san/neovimulus/releases/latest" |
	grep --only-matching --perl-regexp '"tag_name": "\K(.*)(?=")')

# Construct the URL of the tarball
TARBALL_URL="https://github.com/Jarmos-san/neovimulus/archive/${LATEST_TAG}.tar.gz"

# Temporary location to store the tarball at (it'll be cleaned up later on)
TEMP_DIR=$(mktemp --directory)

# Name of the downloaded tarball
TARBALL="$TEMP_DIR/neovimulus.tar.gz"

# Download the tarball from the repository.
curl --fail --silent --show-error --location --output "$TARBALL" "$TARBALL_URL"

# Neovimulus configuration directory
NEOVIMULUS_CONFIG_DIR="$HOME/.config/neovimulus"

# Create the aforementioned config directory if it doesn't already exists.
if ! test -d "$NEOVIMULUS_CONFIG_DIR"; then
	mkdir --parents "$NEOVIMULUS_CONFIG_DIR"
fi

echo -e "${YELLOW}[INFO]${NOCOLOR} Download complete...extracting the configuration files to $NEOVIMULUS_CONFIG_DIR..."

# Extract the contents of the tarball to the Neovim configuration location
tar --extract --file="$TARBALL" --directory="$NEOVIMULUS_CONFIG_DIR" "neovimulus"

# Check if the ".bashrc" or ".bash_profile" files exists, if not then create either of them and append the "NVIM_APPNAME"
# environment variable which Neovim will natively use to switch to the Neovimulus configuration framework.
if ! test -f "$HOME/.bashrc" || "$HOME/.bash_profile"; then
	touch "$HOME/.bashrc" && echo "NVIM_APPNAME=$NEOVIMULUS_CONFIG_DIR" >>"$HOME/.bashrc"
fi

echo -e "${GREEN}[SUCCESS]${NOCOLOR} Neovimulus was successfully installed and setup!"
echo -e "${YELLOW}[INFO]{$NOCOLOR} You can now restart you terminal and invoke the \"nvim\" command to start using Neovimulus..."

# Invoke the script with all arbitrary parameters passed to it as flags
main "$@"

# Invoke the cleanup function after the script exists with a sucessful invocation
trap cleanup EXIT
